// GENERATED CODE. DO NOT EDIT

package models

import (
	"fmt"
	"regexp"
)

{{ range .ServerInterface.Routes -}}
type {{ .Name }}{{ .Method }}Request struct {
	{{- range .Parameters }}
	{{ .Name | ToTitle }} *{{ .Type }}
	{{- end }}
	{{ if ne .RequestBody.Type "" -}}
	Body {{ .RequestBody.Type }}
	{{- end }}
}

func (model {{ .Name }}{{ .Method }}Request)IsValid() error {
	{{- range .Parameters }}
	{{- if eq .Required true }}
	if model.{{ .Name | Sanitize | ToTitle }} == nil {
			return fmt.Errorf("model.{{ .Name | Sanitize | ToTitle }} is required")
	}
	{{- end }}
	{{- if eq .Type "string" }}
	{{- if ne .MinLength 0 }}
	if len(*model.{{ .Name | Sanitize | ToTitle }}) < {{ .MinLength }} {
		return fmt.Errorf("model.{{ .Name | Sanitize | ToTitle }} too short")
	}
	{{- end }}

	{{- if ne .MaxLength 0 }}
	if len(*model.{{ .Name | Sanitize | ToTitle }}) > {{ .MaxLength }} {
		return fmt.Errorf("model.{{ .Name | Sanitize | ToTitle }} too long")
	}
	{{- end }}
	{{- end }}
	{{- end }}
	{{ if ne .RequestBody.Type "" -}}
	err := model.Body.IsValid()
	if err != nil {
		return err
	}
	{{- end }}
	return nil
}

{{ $interfaceName := (printf "%s%s%s" .Name .Method "Response") }}
type {{ $interfaceName }} interface {
	Implements{{ $interfaceName }}()
	GetStatus() int
}

{{ range $code, $response := .Responses }}
func New{{ $response.Name }}(
	{{- range $name, $schema := $response.Properties -}}{{ $name | Sanitize | ToTitle }} {{ $schema.Type }}, {{ end -}}
) {{ .Name }} {
	return {{ $response.Name }}{
		{{- range $name, $schema := $response.Properties }}
    {{ $name | Sanitize | ToTitle }}: &{{ $name | Sanitize | ToTitle }},
    {{- end }}
    }
}

type {{ $response.Name }} struct {
	{{- range $name, $schema := $response.Properties }}
	{{ $name | Sanitize | ToTitle }} *{{ $schema.Type }} `json:"{{ $name }}"`
	{{- end }}
}

func ({{ $response.Name }}) Implements{{ $interfaceName }}(){}

func ({{ $response.Name }}) GetStatus() int {
	return {{ $code }}
}
{{ end }}
{{ end -}}

{{ range .ServerInterface.Models }}
func New{{ .Name }}(
	{{- range $name, $schema := .Properties -}}{{ $name | Sanitize | ToTitle }} {{ $schema.Type }}, {{ end -}}
) {{ .Name }} {
	return {{ .Name }}{
		{{- range $name, $schema := .Properties }}
    {{ $name | Sanitize | ToTitle }}: &{{ $name | Sanitize | ToTitle }},
    {{- end }}
    }
}

type {{ .Name }} struct {
	{{- range $name, $schema := .Properties }}
	{{ $name | Sanitize | ToTitle }} *{{ $schema.Type }} `json:"{{ $name }}"`
	{{- end }}
}

func (model {{ .Name }})IsValid() error {
	{{- range $name, $schema := .Properties }}
	{{- if eq $schema.Required true }}
	if model.{{ $name | Sanitize | ToTitle }} == nil {
	    return fmt.Errorf("model.{{ $name | Sanitize | ToTitle }} is required")
	}
	{{- end }}

	{{- if eq $schema.Type "string" }}

	{{- if ne $schema.MinLength 0 }}
	if len(*model.{{ $name | Sanitize | ToTitle }}) < {{ $schema.MinLength }} {
		return fmt.Errorf("model.{{ $name | Sanitize | ToTitle }} too short")
	}
	{{- end }}

	{{- if ne $schema.MaxLength 0 }}
	if len(*model.{{ $name | Sanitize | ToTitle }}) > {{ $schema.MaxLength }} {
		return fmt.Errorf("model.{{ $name | Sanitize | ToTitle }} too long")
	}
	{{- end }}

	{{- if ne $schema.Pattern "" }}
	// Regular expressions are checked for compilation during code generation
	// No need to check them here.
	r{{ $name | Sanitize | ToTitle }}, _ := regexp.Compile("{{ $schema.Pattern }}")
	if !r{{ $name | Sanitize | ToTitle }}.MatchString(*model.{{ $name | Sanitize | ToTitle }}) {
		return fmt.Errorf("model.{{ $name | Sanitize | ToTitle }} did not pass validation pattern")
	}
	{{- end }}

	{{- end }}
	{{- end }}

	return nil
}
{{ end }}